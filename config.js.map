{"version":3,"sources":["../src/config.js"],"names":["APP_CONFIG_INITIALIZED","publish","subscribe","ensureDefinedConfig","CONFIG_TOPIC","CONFIG_CHANGED","ENVIRONMENT","process","env","NODE_ENV","config","ACCESS_TOKEN_COOKIE_NAME","BASE_URL","BASENAME","CREDENTIALS_BASE_URL","CSRF_TOKEN_API_PATH","ECOMMERCE_BASE_URL","LANGUAGE_PREFERENCE_COOKIE_NAME","LMS_BASE_URL","LOGIN_URL","LOGOUT_URL","MARKETING_SITE_BASE_URL","ORDER_HISTORY_URL","REFRESH_ACCESS_TOKEN_ENDPOINT","SECURE_COOKIES","SEGMENT_KEY","SITE_NAME","USER_INFO_COOKIE_NAME","getConfig","setConfig","newConfig","mergeConfig","Object","assign","ensureConfig","keys","requester","forEach","key","undefined","Error"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASA,sBAAT,QAAuC,cAAvC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,UAAnC;AACA,SAASC,mBAAT,QAAoC,SAApC;AAEA,OAAO,IAAMC,YAAY,GAAG,QAArB;AACP,OAAO,IAAMC,cAAc,aAAMD,YAAN,aAApB;AAEP,IAAME,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAhC;AACA,IAAIC,MAAM,GAAG;AACXC,EAAAA,wBAAwB,EAAEJ,OAAO,CAACC,GAAR,CAAYG,wBAD3B;AAEXC,EAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYI,QAFX;AAGXC,EAAAA,QAAQ,EAAEN,OAAO,CAACC,GAAR,CAAYK,QAHX;AAIXC,EAAAA,oBAAoB,EAAEP,OAAO,CAACC,GAAR,CAAYM,oBAJvB;AAKXC,EAAAA,mBAAmB,EAAER,OAAO,CAACC,GAAR,CAAYO,mBALtB;AAMXC,EAAAA,kBAAkB,EAAET,OAAO,CAACC,GAAR,CAAYQ,kBANrB;AAOXV,EAAAA,WAAW,EAAXA,WAPW;AAQXW,EAAAA,+BAA+B,EAAEV,OAAO,CAACC,GAAR,CAAYS,+BARlC;AASXC,EAAAA,YAAY,EAAEX,OAAO,CAACC,GAAR,CAAYU,YATf;AAUXC,EAAAA,SAAS,EAAEZ,OAAO,CAACC,GAAR,CAAYW,SAVZ;AAWXC,EAAAA,UAAU,EAAEb,OAAO,CAACC,GAAR,CAAYY,UAXb;AAYXC,EAAAA,uBAAuB,EAAEd,OAAO,CAACC,GAAR,CAAYa,uBAZ1B;AAaXC,EAAAA,iBAAiB,EAAEf,OAAO,CAACC,GAAR,CAAYc,iBAbpB;AAcXC,EAAAA,6BAA6B,EAAEhB,OAAO,CAACC,GAAR,CAAYe,6BAdhC;AAeXC,EAAAA,cAAc,EAAElB,WAAW,KAAK,aAfrB;AAgBXmB,EAAAA,WAAW,EAAElB,OAAO,CAACC,GAAR,CAAYiB,WAhBd;AAiBXC,EAAAA,SAAS,EAAEnB,OAAO,CAACC,GAAR,CAAYkB,SAjBZ;AAkBXC,EAAAA,qBAAqB,EAAEpB,OAAO,CAACC,GAAR,CAAYmB;AAlBxB,CAAb;AAqBA;;;;;;;;AAOA,OAAO,SAASC,SAAT,GAAqB;AAC1B,SAAOlB,MAAP;AACD;AAED;;;;;;;;;AAQA,OAAO,SAASmB,SAAT,CAAmBC,SAAnB,EAA8B;AACnC3B,EAAAA,mBAAmB,CAACO,MAAD,EAAS,QAAT,CAAnB;AACAA,EAAAA,MAAM,GAAGoB,SAAT;AACA7B,EAAAA,OAAO,CAACI,cAAD,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAcA,OAAO,SAAS0B,WAAT,CAAqBD,SAArB,EAAgC;AACrC3B,EAAAA,mBAAmB,CAAC2B,SAAD,EAAY,yBAAZ,CAAnB;AACApB,EAAAA,MAAM,GAAGsB,MAAM,CAACC,MAAP,CAAcvB,MAAd,EAAsBoB,SAAtB,CAAT;AACA7B,EAAAA,OAAO,CAACI,cAAD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,SAAS6B,YAAT,CAAsBC,IAAtB,EAAwE;AAAA,MAA5CC,SAA4C,uEAAhC,8BAAgC;AAC7ElC,EAAAA,SAAS,CAACF,sBAAD,EAAyB,YAAM;AACtCmC,IAAAA,IAAI,CAACE,OAAL,CAAa,UAACC,GAAD,EAAS;AACpB,UAAI5B,MAAM,CAAC4B,GAAD,CAAN,KAAgBC,SAApB,EAA+B;AAC7B,cAAM,IAAIC,KAAJ,oCAAsCF,GAAtC,6BAA4DF,SAA5D,OAAN;AACD;AACF,KAJD;AAKD,GANQ,CAAT;AAOD;AAED","sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform**\n *\n * The configuration module provides utilities for working with an application's configuration\n * document (ConfigDocument).  This module uses `process.env` to import configuration variables\n * from the command-line build process.  It can be dynamically extended at run-time using a\n * `config` initialization handler.  Please see the Initialization documentation for more\n * information on handlers and initialization phases.\n *\n * ```\n * import { getConfig } from '@edx/frontend-platform';\n *\n * const {\n *   BASE_URL,\n *   LMS_BASE_URL,\n *   LOGIN_URL,\n *   LOGIN_URL,\n *   REFRESH_ACCESS_TOKEN_ENDPOINT,\n *   ACCESS_TOKEN_COOKIE_NAME,\n *   CSRF_TOKEN_API_PATH,\n * } = getConfig();\n * ```\n *\n * @module Config\n */\n\nimport { APP_CONFIG_INITIALIZED } from './initialize';\nimport { publish, subscribe } from './pubSub';\nimport { ensureDefinedConfig } from './utils';\n\nexport const CONFIG_TOPIC = 'CONFIG';\nexport const CONFIG_CHANGED = `${CONFIG_TOPIC}.CHANGED`;\n\nconst ENVIRONMENT = process.env.NODE_ENV;\nlet config = {\n  ACCESS_TOKEN_COOKIE_NAME: process.env.ACCESS_TOKEN_COOKIE_NAME,\n  BASE_URL: process.env.BASE_URL,\n  BASENAME: process.env.BASENAME,\n  CREDENTIALS_BASE_URL: process.env.CREDENTIALS_BASE_URL,\n  CSRF_TOKEN_API_PATH: process.env.CSRF_TOKEN_API_PATH,\n  ECOMMERCE_BASE_URL: process.env.ECOMMERCE_BASE_URL,\n  ENVIRONMENT,\n  LANGUAGE_PREFERENCE_COOKIE_NAME: process.env.LANGUAGE_PREFERENCE_COOKIE_NAME,\n  LMS_BASE_URL: process.env.LMS_BASE_URL,\n  LOGIN_URL: process.env.LOGIN_URL,\n  LOGOUT_URL: process.env.LOGOUT_URL,\n  MARKETING_SITE_BASE_URL: process.env.MARKETING_SITE_BASE_URL,\n  ORDER_HISTORY_URL: process.env.ORDER_HISTORY_URL,\n  REFRESH_ACCESS_TOKEN_ENDPOINT: process.env.REFRESH_ACCESS_TOKEN_ENDPOINT,\n  SECURE_COOKIES: ENVIRONMENT !== 'development',\n  SEGMENT_KEY: process.env.SEGMENT_KEY,\n  SITE_NAME: process.env.SITE_NAME,\n  USER_INFO_COOKIE_NAME: process.env.USER_INFO_COOKIE_NAME,\n};\n\n/**\n * Getter for the application configuration document.  This is synchronous and merely returns a\n * reference to an existing object, and is thus safe to call as often as desired.  The document\n * should have the following keys at a minimum:\n *\n * @returns {ConfigDocument}\n  */\nexport function getConfig() {\n  return config;\n}\n\n/**\n * Replaces the existing ConfigDocument.  This is not commonly used, but can be helpful for tests.\n *\n * The supplied config document will be tested with `ensureDefinedConfig` to ensure it does not\n * have any `undefined` keys.\n *\n * @param {ConfigDocument} newConfig\n */\nexport function setConfig(newConfig) {\n  ensureDefinedConfig(config, 'config');\n  config = newConfig;\n  publish(CONFIG_CHANGED);\n}\n\n/**\n * Merges additional configuration values into the ConfigDocument returned by `getConfig`.  Will\n * override any values that exist with the same keys.\n *\n * ```\n * mergeConfig({\n *   NEW_KEY: 'new value',\n *   OTHER_NEW_KEY: 'other new value',\n * });\n *\n * If any of the key values are `undefined`, an error will be thrown.\n *\n * @param {Object} newConfig\n */\nexport function mergeConfig(newConfig) {\n  ensureDefinedConfig(newConfig, 'ProcessEnvConfigService');\n  config = Object.assign(config, newConfig);\n  publish(CONFIG_CHANGED);\n}\n\n/**\n * A method allowing application code to indicate that particular ConfigDocument keys are required\n * for them to function.  This is useful for diagnosing development/deployment issues, primarily,\n * by surfacing misconfigurations early.  For instance, if the build process fails to supply an\n * environment variable on the command-line, it's possible that one of the `process.env` variables\n * will be undefined.  Should be used in conjunction with `mergeConfig` for custom `ConfigDocument`\n * properties.  Requester is for informational/error reporting purposes only.\n *\n * ```\n * ensureConfig(['LMS_BASE_URL', 'LOGIN_URL'], 'MySpecialComponent');\n *\n * // Will throw an error with:\n * // \"App configuration error: LOGIN_URL is required by MySpecialComponent.\"\n * // if LOGIN_URL is undefined, for example.\n * ```\n *\n * *NOTE*: `ensureConfig` waits until `APP_CONFIG_INITIALIZED` is published to verify the existence\n * of the specified properties.  This means that this function is compatible with custom `config`\n * phase handlers responsible for loading additional configuration data in the initialization\n * sequence.\n *\n * @param {Array} keys\n * @param {string} [requester='unspecified application code']\n */\nexport function ensureConfig(keys, requester = 'unspecified application code') {\n  subscribe(APP_CONFIG_INITIALIZED, () => {\n    keys.forEach((key) => {\n      if (config[key] === undefined) {\n        throw new Error(`App configuration error: ${key} is required by ${requester}.`);\n      }\n    });\n  });\n}\n\n/**\n * An object describing the current application configuration.\n *\n * The implementation loads this document via `process.env` variables.\n *\n * ```\n * {\n *   BASE_URL: process.env.BASE_URL,\n *   // ... other vars\n * }\n * ```\n *\n * When using Webpack (i.e., normal usage), the build process is responsible for supplying these\n * variables via command-line environment variables.  That means they must be supplied at build\n * time.\n *\n * @name ConfigDocument\n * @memberof module:Config\n * @property {string} ACCESS_TOKEN_COOKIE_NAME\n * @property {string} BASE_URL The URL of the current application.\n * @property {string} CREDENTIALS_BASE_URL\n * @property {string} CSRF_TOKEN_API_PATH\n * @property {string} ECOMMERCE_BASE_URL\n * @property {string} ENVIRONMENT This is one of: development, production, or test.\n * @property {string} LANGUAGE_PREFERENCE_COOKIE_NAME\n * @property {string} LMS_BASE_URL\n * @property {string} LOGIN_URL\n * @property {string} LOGOUT_URL\n * @property {string} MARKETING_SITE_BASE_URL\n * @property {string} ORDER_HISTORY_URL\n * @property {string} REFRESH_ACCESS_TOKEN_ENDPOINT\n * @property {boolean} SECURE_COOKIES\n * @property {string} SEGMENT_KEY\n * @property {string} SITE_NAME\n * @property {string} USER_INFO_COOKIE_NAME\n */\n"],"file":"config.js"}