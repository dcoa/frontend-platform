{"version":3,"sources":["../../src/logging/NewRelicLoggingService.js"],"names":["MAX_ERROR_LENGTH","fixErrorLength","error","message","length","processedError","Object","create","substring","NewRelicLoggingService","customAttributes","process","env","NODE_ENV","console","log","window","newrelic","addPageAction","assign","errorCustomAttributes","allCustomAttributes","keys","undefined","noticeError"],"mappings":";;;;;;;;;;;;AAAA;;;;;AAKA,OAAO,IAAMA,gBAAgB,GAAG,IAAzB;;AAEP,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIA,KAAK,CAACC,OAAN,IAAiBD,KAAK,CAACC,OAAN,CAAcC,MAAd,GAAuBJ,gBAA5C,EAA8D;AAC5D,QAAMK,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAcL,KAAd,CAAvB;AACAG,IAAAA,cAAc,CAACF,OAAf,GAAyBE,cAAc,CAACF,OAAf,CAAuBK,SAAvB,CAAiC,CAAjC,EAAoCR,gBAApC,CAAzB;AACA,WAAOK,cAAP;AACD,GAJD,MAIO,IAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACE,MAAN,GAAeJ,gBAAhD,EAAkE;AACvE,WAAOE,KAAK,CAACM,SAAN,CAAgB,CAAhB,EAAmBR,gBAAnB,CAAP;AACD;;AACD,SAAOE,KAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2BqBO,sB;;;;;;;;AACnB;;;;;;;4BAOQN,O,EAAgC;AAAA,UAAvBO,gBAAuB,uEAAJ,EAAI;;AACtC;AACA,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,QAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAAqBO,gBAArB,EAD0C,CACF;AACzC;AACD;;;AACA,UAAIM,MAAM,IAAI,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAzC,EAAsD;AACpDD,QAAAA,MAAM,CAACC,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,EAAsCZ,MAAM,CAACa,MAAP,CAAc,EAAd,EAAkB;AAAEhB,UAAAA,OAAO,EAAPA;AAAF,SAAlB,EAA+BO,gBAA/B,CAAtC;AACD;AACF;AAED;;;;;;;;;;6BAOSR,K,EAA8B;AAAA,UAAvBQ,gBAAuB,uEAAJ,EAAI;AACrC,UAAMU,qBAAqB,GAAGlB,KAAK,CAACQ,gBAAN,IAA0B,EAAxD;;AACA,UAAIW,mBAAmB,qBAAQD,qBAAR,MAAkCV,gBAAlC,CAAvB;;AACA,UAAIJ,MAAM,CAACgB,IAAP,CAAYD,mBAAZ,EAAiCjB,MAAjC,KAA4C,CAAhD,EAAmD;AACjD;AACAiB,QAAAA,mBAAmB,GAAGE,SAAtB;AACD;AACD;;;AACA,UAAIZ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,QAAAA,OAAO,CAACZ,KAAR,CAAcA,KAAd,EAAqBmB,mBAArB,EAD0C,CACC;AAC5C;AACD;;;AACA,UAAIL,MAAM,IAAI,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAzC,EAAsD;AACpD;AACAD,QAAAA,MAAM,CAACC,QAAP,CAAgBO,WAAhB,CAA4BvB,cAAc,CAACC,KAAD,CAA1C,EAAmDmB,mBAAnD;AACD;AACF;;;;;;SA1CkBZ,sB","sourcesContent":["/**\n * NewRelic will not log an error if it is too long.\n *\n * @ignore\n */\nexport const MAX_ERROR_LENGTH = 4000;\n\nfunction fixErrorLength(error) {\n  if (error.message && error.message.length > MAX_ERROR_LENGTH) {\n    const processedError = Object.create(error);\n    processedError.message = processedError.message.substring(0, MAX_ERROR_LENGTH);\n    return processedError;\n  } else if (typeof error === 'string' && error.length > MAX_ERROR_LENGTH) {\n    return error.substring(0, MAX_ERROR_LENGTH);\n  }\n  return error;\n}\n\n/**\n * The NewRelicLoggingService is a concrete implementation of the logging service interface that\n * sends messages to NewRelic that can be seen in NewRelic Browser and NewRelic Insights. When in\n * development mode, all messages will instead be sent to the console.\n *\n * When you use `logError`, your errors will appear under \"JS errors\"\n * for your Browser application.\n *\n * ```\n * SELECT * from JavaScriptError WHERE errorStatus is not null SINCE 10 days ago\n * ```\n *\n * When using `logInfo`, these only appear in New Relic Insights when querying for page actions as\n * follows:\n *\n * ```\n * SELECT * from PageAction WHERE actionName = 'INFO' SINCE 1 hour ago\n * ```\n *\n * You can also add your own custom metrics as an additional argument, or see the code to find\n * other standard custom attributes.\n *\n * Requires the NewRelic Browser JavaScript snippet.\n *\n * @implements {LoggingService}\n * @memberof module:Logging\n */\nexport default class NewRelicLoggingService {\n  /**\n   *\n   *\n   * @param {*} message\n   * @param {*} [customAttributes={}]\n   * @memberof NewRelicLoggingService\n   */\n  logInfo(message, customAttributes = {}) {\n    /* istanbul ignore next */\n    if (process.env.NODE_ENV === 'development') {\n      console.log(message, customAttributes); // eslint-disable-line\n    }\n    /* istanbul ignore else */\n    if (window && typeof window.newrelic !== 'undefined') {\n      window.newrelic.addPageAction('INFO', Object.assign({}, { message }, customAttributes));\n    }\n  }\n\n  /**\n   *\n   *\n   * @param {*} error\n   * @param {*} [customAttributes={}]\n   * @memberof NewRelicLoggingService\n   */\n  logError(error, customAttributes = {}) {\n    const errorCustomAttributes = error.customAttributes || {};\n    let allCustomAttributes = { ...errorCustomAttributes, ...customAttributes };\n    if (Object.keys(allCustomAttributes).length === 0) {\n      // noticeError expects undefined if there are no custom attributes.\n      allCustomAttributes = undefined;\n    }\n    /* istanbul ignore next */\n    if (process.env.NODE_ENV === 'development') {\n      console.error(error, allCustomAttributes); // eslint-disable-line\n    }\n    /* istanbul ignore else */\n    if (window && typeof window.newrelic !== 'undefined') {\n      // Note: customProperties are not sent.  Presumably High-Security Mode is being used.\n      window.newrelic.noticeError(fixErrorLength(error), allCustomAttributes);\n    }\n  }\n}\n"],"file":"NewRelicLoggingService.js"}