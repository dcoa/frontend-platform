{"version":3,"sources":["../../src/logging/interface.js"],"names":["PropTypes","optionsShape","config","object","isRequired","serviceShape","logInfo","func","logError","service","configure","LoggingService","options","checkPropTypes","message","customAttributes","error","getLoggingService","Error","resetLoggingService"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAEF,SAAS,CAACG,MAAV,CAAiBC;AADN,CAArB;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAEN,SAAS,CAACO,IAAV,CAAeH,UADL;AAEnBI,EAAAA,QAAQ,EAAER,SAAS,CAACO,IAAV,CAAeH;AAFN,CAArB;AAKA,IAAIK,OAAO,GAAG,IAAd;AAEA;;;;AAGA,OAAO,SAASC,SAAT,CAAmBC,cAAnB,EAAmCC,OAAnC,EAA4C;AACjDZ,EAAAA,SAAS,CAACa,cAAV,CAAyBZ,YAAzB,EAAuCW,OAAvC,EAAgD,UAAhD,EAA4D,SAA5D;AACAH,EAAAA,OAAO,GAAG,IAAIE,cAAJ,CAAmBC,OAAnB,CAAV;AACAZ,EAAAA,SAAS,CAACa,cAAV,CAAyBR,YAAzB,EAAuCI,OAAvC,EAAgD,UAAhD,EAA4D,gBAA5D;AACA,SAAOA,OAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASH,OAAT,CAAiBQ,OAAjB,EAA0BC,gBAA1B,EAA4C;AACjD,SAAON,OAAO,CAACH,OAAR,CAAgBQ,OAAhB,EAAyBC,gBAAzB,CAAP;AACD;AAED;;;;;;;;;AAQA,OAAO,SAASP,QAAT,CAAkBQ,KAAlB,EAAyBD,gBAAzB,EAA2C;AAChD,SAAON,OAAO,CAACD,QAAR,CAAiBQ,KAAjB,EAAwBD,gBAAxB,CAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASE,iBAAT,GAA6B;AAClC,MAAI,CAACR,OAAL,EAAc;AACZ,UAAMS,KAAK,CAAC,+CAAD,CAAX;AACD;;AACD,SAAOT,OAAP;AACD;AAED;;;;;AAIA,OAAO,SAASU,mBAAT,GAA+B;AACpCV,EAAAA,OAAO,GAAG,IAAV;AACD;AAED","sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform/logging**\n *\n * Contains a shared interface for logging information.  Has a default implementation of\n * NewRelicLoggingService that sends messages to NewRelic that can be seen in NewRelic Browser and\n * NewRelic Insights. When in development mode, all messages will instead be sent to the console.\n *\n * When you use `logError` or `logApiClientError`, your errors will appear under \"JS errors\"\n * for your Browser application.\n *\n * Additionally, when you use `logApiClientError`, you get some additional custom metrics for Axios\n * error responses. To see those details, you can use a New Relic Insights query like the\n * following\n *\n * ```\n * SELECT * from JavaScriptError WHERE errorStatus is not null SINCE 10 days ago\n * ```\n *\n * When using `logInfo`, these only appear in New Relic Insights when querying for page actions as\n * follows:\n *\n * ```\n * SELECT * from PageAction WHERE actionName = 'INFO' SINCE 1 hour ago\n * ```\n *\n * You can also add your own custom metrics as an additional argument, or see the code to find\n * other standard custom attributes.\n *\n * The `initialize` function performs much of the logging configuration for you.  If, however,\n * you're not using the `initialize` function, logging can be configured via:\n *\n * ```\n * import { configure, NewRelicLoggingService, logError } from '@edx/frontend-platform/logging';\n * import { geConfig } from '@edx/frontend-platform';\n *\n * configureLogging(loggingService, {\n *   config: getConfig(),\n * });\n *\n * logInfo('Just so you know...');\n * logError('Uhoh!');\n * logError(new Error('Uhoh error!'));\n * ```\n *\n * As shown in this example, logging depends on the configuration document.\n *\n * @module Logging\n */\n\nimport PropTypes from 'prop-types';\n\nconst optionsShape = {\n  config: PropTypes.object.isRequired,\n};\n\nconst serviceShape = {\n  logInfo: PropTypes.func.isRequired,\n  logError: PropTypes.func.isRequired,\n};\n\nlet service = null;\n\n/**\n *\n */\nexport function configure(LoggingService, options) {\n  PropTypes.checkPropTypes(optionsShape, options, 'property', 'Logging');\n  service = new LoggingService(options);\n  PropTypes.checkPropTypes(serviceShape, service, 'property', 'LoggingService');\n  return service;\n}\n\n/**\n * Logs a message to the 'info' log level.\n *\n * @param {string} message\n * @param {Object} [customAttributes={}]\n */\nexport function logInfo(message, customAttributes) {\n  return service.logInfo(message, customAttributes);\n}\n\n/**\n * Logs a message to the 'error' log level.  Can accept custom attributes as a property of the error\n * object, or as an optional second parameter.\n *\n * @param {string|Error} error\n * @param {Object} [error.customAttributes={}]\n * @param {Object} [customAttributes={}]\n */\nexport function logError(error, customAttributes) {\n  return service.logError(error, customAttributes);\n}\n\n/**\n *\n * @throws {Error} Thrown if the logging service has not yet been configured via {@link configure}.\n * @returns {LoggingService}\n */\nexport function getLoggingService() {\n  if (!service) {\n    throw Error('You must first configure the logging service.');\n  }\n  return service;\n}\n\n/**\n * Sets the configured logging service back to null.\n *\n */\nexport function resetLoggingService() {\n  service = null;\n}\n\n/**\n * @name LoggingService\n * @interface\n * @memberof module:Logging\n * @property {function} logError\n * @property {function} logInfo\n */\n"],"file":"interface.js"}