{"version":3,"sources":["../../src/analytics/SegmentAnalyticsService.js"],"names":["formurlencoded","snakeCaseObject","SegmentAnalyticsService","httpClient","loggingService","config","trackingLogApiUrl","LMS_BASE_URL","segmentKey","SEGMENT_KEY","initialize","global","analytics","invoked","methods","factory","method","args","unshift","push","forEach","key","load","options","script","document","createElement","type","async","src","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION","hasIdentifyBeenCalled","logError","eventName","properties","snakeEventData","deep","serverData","event_type","event","JSON","stringify","page","location","href","post","headers","error","userId","traits","Error","identify","checkIdentifyCalled","track","category","name"],"mappings":";;;;;;;;AAAA,OAAOA,cAAP,MAA2B,iBAA3B;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA;;;;;IAIMC,uB;AAGJ,yCAAoD;AAAA,QAAtCC,UAAsC,QAAtCA,UAAsC;AAAA,QAA1BC,cAA0B,QAA1BA,cAA0B;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AAAA;;AAClD,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKG,iBAAL,aAA4BD,MAAM,CAACE,YAAnC;AACA,SAAKC,UAAL,GAAkBH,MAAM,CAACI,WAAzB;AACA,SAAKC,UAAL;AACD,G,CAED;AACA;AACA;;;;;iCACa;AACX;AACAC,MAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,IAAoB,EAAvC;AAFW,oBAGWD,MAHX;AAAA,UAGHC,SAHG,WAGHA,SAHG,EAKX;;AACA,UAAIA,SAAS,CAACF,UAAd,EAA0B,OANf,CAQX;;AACA,UAAIE,SAAS,CAACC,OAAd,EAAuB;AACrB;AACD,OAXU,CAaX;AACA;;;AACAD,MAAAA,SAAS,CAACC,OAAV,GAAoB,IAApB,CAfW,CAiBX;;AACAD,MAAAA,SAAS,CAACE,OAAV,GAAoB,CAClB,aADkB,EAElB,YAFkB,EAGlB,WAHkB,EAIlB,WAJkB,EAKlB,UALkB,EAMlB,UANkB,EAOlB,OAPkB,EAQlB,OARkB,EASlB,OATkB,EAUlB,OAVkB,EAWlB,OAXkB,EAYlB,OAZkB,EAalB,MAbkB,EAclB,MAdkB,EAelB,KAfkB,EAgBlB,IAhBkB,CAApB,CAlBW,CAqCX;AACA;AACA;AACA;;AACAF,MAAAA,SAAS,CAACG,OAAV,GAAoB,UAAAC,MAAM;AAAA,eAAK,YAAa;AAAA,4CAATC,IAAS;AAATA,YAAAA,IAAS;AAAA;;AAC1CA,UAAAA,IAAI,CAACC,OAAL,CAAaF,MAAb;AACAJ,UAAAA,SAAS,CAACO,IAAV,CAAeF,IAAf;AACA,iBAAOL,SAAP;AACD,SAJyB;AAAA,OAA1B,CAzCW,CA+CX;;;AACAA,MAAAA,SAAS,CAACE,OAAV,CAAkBM,OAAlB,CAA0B,UAACC,GAAD,EAAS;AACjCT,QAAAA,SAAS,CAACS,GAAD,CAAT,GAAiBT,SAAS,CAACG,OAAV,CAAkBM,GAAlB,CAAjB;AACD,OAFD,EAhDW,CAoDX;AACA;;AACAT,MAAAA,SAAS,CAACU,IAAV,GAAiB,UAACD,GAAD,EAAME,OAAN,EAAkB;AACjC;AACA,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,QAAAA,MAAM,CAACG,IAAP,GAAc,iBAAd;AACAH,QAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;AACAJ,QAAAA,MAAM,CAACK,GAAP,qDAAwDR,GAAxD,uBALiC,CAOjC;;AACA,YAAMS,KAAK,GAAGL,QAAQ,CAACM,oBAAT,CAA8B,QAA9B,EAAwC,CAAxC,CAAd;AACAD,QAAAA,KAAK,CAACE,UAAN,CAAiBC,YAAjB,CAA8BT,MAA9B,EAAsCM,KAAtC;AACAlB,QAAAA,SAAS,CAACsB,YAAV,GAAyBX,OAAzB,CAViC,CAUC;AACnC,OAXD,CAtDW,CAmEX;;;AACAX,MAAAA,SAAS,CAACuB,eAAV,GAA4B,OAA5B,CApEW,CAsEX;AACA;;AACAvB,MAAAA,SAAS,CAACU,IAAV,CAAe,KAAKd,UAApB;AACD;AAED;;;;;;;0CAIsB;AACpB,UAAI,CAAC,KAAK4B,qBAAV,EAAiC;AAC/B,aAAKhC,cAAL,CAAoBiC,QAApB,CAA6B,uDAA7B;AACD;AACF;AAED;;;;;;;;;;;;yCASqBC,S,EAAWC,U,EAAY;AAAA;;AAC1C,UAAMC,cAAc,GAAGvC,eAAe,CAACsC,UAAD,EAAa;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAb,CAAtC;AACA,UAAMC,UAAU,GAAG;AACjBC,QAAAA,UAAU,EAAEL,SADK;AAEjBM,QAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeN,cAAf,CAFU;AAGjBO,QAAAA,IAAI,EAAEpC,MAAM,CAACqC,QAAP,CAAgBC;AAHL,OAAnB;AAKA,aAAO,KAAK9C,UAAL,CAAgB+C,IAAhB,CACL,KAAK5C,iBADA,EAELN,cAAc,CAAC0C,UAAD,CAFT,EAGL;AACES,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADX,OAHK,WAQC,UAACC,KAAD,EAAW;AACjB,QAAA,KAAI,CAAChD,cAAL,CAAoBiC,QAApB,CAA6Be,KAA7B;AACD,OAVM,CAAP;AAWD;AAED;;;;;;;;;8CAM0BC,M,EAAQC,M,EAAQ;AACxC,UAAI,CAACD,MAAL,EAAa;AACX,cAAM,IAAIE,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD5C,MAAAA,MAAM,CAACC,SAAP,CAAiB4C,QAAjB,CAA0BH,MAA1B,EAAkCC,MAAlC;AACA,WAAKlB,qBAAL,GAA6B,IAA7B;AACD;AAED;;;;;;;;0CAKsBkB,M,EAAQ;AAC5B3C,MAAAA,MAAM,CAACC,SAAP,CAAiB4C,QAAjB,CAA0BF,MAA1B;AACA,WAAKlB,qBAAL,GAA6B,IAA7B;AACD;AAED;;;;;;;;;;mCAOeE,S,EAAWC,U,EAAY;AACpC,WAAKkB,mBAAL;AACA9C,MAAAA,MAAM,CAACC,SAAP,CAAiB8C,KAAjB,CAAuBpB,SAAvB,EAAkCC,UAAlC;AACD;AAED;;;;;;;;;;kCAOcoB,Q,EAAUC,I,EAAMrB,U,EAAY;AACxC,WAAKkB,mBAAL;AACA9C,MAAAA,MAAM,CAACC,SAAP,CAAiBmC,IAAjB,CAAsBY,QAAtB,EAAgCC,IAAhC,EAAsCrB,UAAtC;AACD;;;;;;gBA9KGrC,uB,2BAC2B,K;;AAgLjC,eAAeA,uBAAf","sourcesContent":["import formurlencoded from 'form-urlencoded';\nimport { snakeCaseObject } from '../utils';\n\n/**\n * @implements {AnalyticsService}\n * @memberof module:Analytics\n */\nclass SegmentAnalyticsService {\n  static hasIdentifyBeenCalled = false;\n\n  constructor({ httpClient, loggingService, config }) {\n    this.loggingService = loggingService;\n    this.httpClient = httpClient;\n    this.trackingLogApiUrl = `${config.LMS_BASE_URL}/event`;\n    this.segmentKey = config.SEGMENT_KEY;\n    this.initialize();\n  }\n\n  // The code in this function is from Segment's website, with the following\n  // update: - Takes the segment key as a parameter (\n  // https://segment.com/docs/sources/website/analytics.js/quickstart/\n  initialize() {\n    // Create a queue, but don't obliterate an existing one!\n    global.analytics = global.analytics || [];\n    const { analytics } = global;\n\n    // If the real analytics.js is already on the page return.\n    if (analytics.initialize) return;\n\n    // If the snippet was invoked do nothing.\n    if (analytics.invoked) {\n      return;\n    }\n\n    // Invoked flag, to make sure the snippet\n    // is never invoked twice.\n    analytics.invoked = true;\n\n    // A list of the methods in Analytics.js to stub.\n    analytics.methods = [\n      'trackSubmit',\n      'trackClick',\n      'trackLink',\n      'trackForm',\n      'pageview',\n      'identify',\n      'reset',\n      'group',\n      'track',\n      'ready',\n      'alias',\n      'debug',\n      'page',\n      'once',\n      'off',\n      'on',\n    ];\n\n    // Define a factory to create stubs. These are placeholders\n    // for methods in Analytics.js so that you never have to wait\n    // for it to load to actually record data. The `method` is\n    // stored as the first argument, so we can replay the data.\n    analytics.factory = method => ((...args) => {\n      args.unshift(method);\n      analytics.push(args);\n      return analytics;\n    });\n\n    // For each of our methods, generate a queueing stub.\n    analytics.methods.forEach((key) => {\n      analytics[key] = analytics.factory(key);\n    });\n\n    // Define a method to load Analytics.js from our CDN,\n    // and that will be sure to only ever load it once.\n    analytics.load = (key, options) => {\n      // Create an async script element based on your key.\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.src = `https://cdn.segment.com/analytics.js/v1/${key}/analytics.min.js`;\n\n      // Insert our script next to the first script element.\n      const first = document.getElementsByTagName('script')[0];\n      first.parentNode.insertBefore(script, first);\n      analytics._loadOptions = options; // eslint-disable-line no-underscore-dangle\n    };\n\n    // Add a version to keep track of what's in the wild.\n    analytics.SNIPPET_VERSION = '4.1.0';\n\n    // Load Analytics.js with your key, which will automatically\n    // load the tools you've enabled for your account. Boosh!\n    analytics.load(this.segmentKey);\n  }\n\n  /**\n   * Checks that identify was first called.  Otherwise, logs error.\n   *\n   */\n  checkIdentifyCalled() {\n    if (!this.hasIdentifyBeenCalled) {\n      this.loggingService.logError('Identify must be called before other tracking events.');\n    }\n  }\n\n  /**\n   * Logs events to tracking log and downstream.\n   * For tracking log event documentation, see\n   * https://openedx.atlassian.net/wiki/spaces/AN/pages/13205895/Event+Design+and+Review+Process\n   *\n   * @param {string} eventName (event_type on backend, but named to match Segment api)\n   * @param {Object} properties (event on backend, but named properties to match Segment api)\n   * @returns {Promise} The promise returned by HttpClient.post.\n   */\n  sendTrackingLogEvent(eventName, properties) {\n    const snakeEventData = snakeCaseObject(properties, { deep: true });\n    const serverData = {\n      event_type: eventName,\n      event: JSON.stringify(snakeEventData),\n      page: global.location.href,\n    };\n    return this.httpClient.post(\n      this.trackingLogApiUrl,\n      formurlencoded(serverData),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      },\n    ).catch((error) => {\n      this.loggingService.logError(error);\n    });\n  }\n\n  /**\n   * * Send identify call to Segment.\n   *\n   * @param {string} userId\n   * @param {*} [traits]\n   */\n  identifyAuthenticatedUser(userId, traits) {\n    if (!userId) {\n      throw new Error('UserId is required for identifyAuthenticatedUser.');\n    }\n    global.analytics.identify(userId, traits);\n    this.hasIdentifyBeenCalled = true;\n  }\n\n  /**\n   * Send anonymous identify call to Segment's identify.\n   *\n   * @param {*} [traits]\n   */\n  identifyAnonymousUser(traits) {\n    global.analytics.identify(traits);\n    this.hasIdentifyBeenCalled = true;\n  }\n\n  /**\n   * Sends a track event to Segment and downstream.\n   * Note: For links and forms, you should use trackLink and trackForm instead.\n   *\n   * @param {*} eventName\n   * @param {*} [properties]\n   */\n  sendTrackEvent(eventName, properties) {\n    this.checkIdentifyCalled();\n    global.analytics.track(eventName, properties);\n  }\n\n  /**\n   * Sends a page event to Segment and downstream.\n   *\n   * @param {*} [name] If only one string arg provided, assumed to be name.\n   * @param {*} [category] Name is required to pass a category.\n   * @param {*} [properties]\n   */\n  sendPageEvent(category, name, properties) {\n    this.checkIdentifyCalled();\n    global.analytics.page(category, name, properties);\n  }\n}\n\nexport default SegmentAnalyticsService;\n"],"file":"SegmentAnalyticsService.js"}