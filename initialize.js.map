{"version":3,"sources":["../src/initialize.js"],"names":["createBrowserHistory","publish","getConfig","configure","configureLogging","getLoggingService","NewRelicLoggingService","logError","configureAnalytics","SegmentAnalyticsService","identifyAnonymousUser","identifyAuthenticatedUser","getAuthenticatedHttpClient","configureAuth","ensureAuthenticatedUser","fetchAuthenticatedUser","hydrateAuthenticatedUser","getAuthenticatedUser","configureI18n","APP_TOPIC","APP_PUBSUB_INITIALIZED","APP_CONFIG_INITIALIZED","APP_AUTH_INITIALIZED","APP_I18N_INITIALIZED","APP_LOGGING_INITIALIZED","APP_ANALYTICS_INITIALIZED","APP_READY","APP_INIT_ERROR","history","basename","initError","error","auth","requireUser","hydrateUser","global","location","href","analytics","authenticatedUser","userId","applyOverrideHandlers","overrides","noOp","pubSub","config","logging","i18n","ready","initialize","loggingService","analyticsService","requireAuthenticatedUser","messages","handlers","overrideHandlers","appBaseUrl","BASE_URL","lmsBaseUrl","LMS_BASE_URL","loginUrl","LOGIN_URL","logoutUrl","refreshAccessTokenEndpoint","REFRESH_ACCESS_TOKEN_ENDPOINT","accessTokenCookieName","ACCESS_TOKEN_COOKIE_NAME","csrfTokenApiPath","CSRF_TOKEN_API_PATH","httpClient","isRedirecting","console","log"],"mappings":"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","sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform**\n *\n * The initialization module provides a function for managing an application's initialization\n * lifecycle.  It also provides constants and default handler implementations.\n *\n * ```\n * import {\n *   initialize,\n *   APP_INIT_ERROR,\n *   APP_READY,\n *   subscribe,\n * } from '@edx/frontend-platform';\n * import { ErrorPage, AppProvider } from '@edx/frontend-platform/react';\n * import React from 'react';\n * import ReactDOM from 'react-dom';\n * import { Route, Switch } from 'react-router-dom';\n *\n * subscribe(APP_READY, () => {\n *   ReactDOM.render(\n *     <AppProvider store={configureStore()}>\n *       <Header />\n *       <main>\n *         <Switch>\n *           <Route exact path=\"/\" component={PaymentPage} />\n *         </Switch>\n *       </main>\n *       <Footer />\n *     </AppProvider>,\n *     document.getElementById('root'),\n *   );\n * });\n *\n * subscribe(APP_INIT_ERROR, (error) => {\n *   ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n * });\n *\n * initialize({\n *   messages: [appMessages],\n *   requireAuthenticatedUser: true,\n *   hydrateAuthenticatedUser: true,\n * });\n\n```\n * @module Initialization\n */\n\nimport { createBrowserHistory } from 'history';\nimport {\n  publish,\n} from './pubSub';\nimport {\n  getConfig,\n} from './config';\nimport { configure as configureLogging, getLoggingService, NewRelicLoggingService, logError } from './logging';\nimport { configure as configureAnalytics, SegmentAnalyticsService, identifyAnonymousUser, identifyAuthenticatedUser } from './analytics';\nimport { getAuthenticatedHttpClient, configure as configureAuth, ensureAuthenticatedUser, fetchAuthenticatedUser, hydrateAuthenticatedUser, getAuthenticatedUser } from './auth';\nimport { configure as configureI18n } from './i18n';\n\n/** @constant */\nexport const APP_TOPIC = 'APP';\n\nexport const APP_PUBSUB_INITIALIZED = `${APP_TOPIC}.PUBSUB_INITIALIZED`;\n\n/**\n * Event published when the application initialization sequence has finished loading any dynamic\n * configuration setup in a custom config handler.\n *\n * @event\n */\nexport const APP_CONFIG_INITIALIZED = `${APP_TOPIC}.CONFIG_INITIALIZED`;\n\n/**\n * Event published when the application initialization sequence has finished determining the user's\n * authentication state, creating an authenticated API client, and executing auth handlers.\n *\n * @event\n */\nexport const APP_AUTH_INITIALIZED = `${APP_TOPIC}.AUTH_INITIALIZED`;\n\n/**\n * Event published when the application initialization sequence has finished initializing\n * internationalization and executing any i18n handlers.\n *\n * @event\n */\nexport const APP_I18N_INITIALIZED = `${APP_TOPIC}.I18N_INITIALIZED`;\n\n/**\n * Event published when the application initialization sequence has finished initializing the\n * logging service and executing any logging handlers.\n *\n * @event\n */\nexport const APP_LOGGING_INITIALIZED = `${APP_TOPIC}.LOGGING_INITIALIZED`;\n\n/**\n * Event published when the application initialization sequence has finished initializing the\n * analytics service and executing any analytics handlers.\n *\n * @event\n */\nexport const APP_ANALYTICS_INITIALIZED = `${APP_TOPIC}.ANALYTICS_INITIALIZED`;\n\n/**\n * Event published when the application initialization sequence has finished.  Applications should\n * subscribe to this event and start rendering the UI when it has fired.\n *\n * @event\n */\nexport const APP_READY = `${APP_TOPIC}.READY`;\n\n/**\n * Event published when the application initialization sequence has aborted.  This is frequently\n * used to show an error page when an initialization error has occurred.\n *\n * @see {@link module:React~ErrorPage}\n * @event\n */\nexport const APP_INIT_ERROR = `${APP_TOPIC}.INIT_ERROR`;\n\n/**\n * A browser history object created by the [history](https://github.com/ReactTraining/history)\n * package.  Applications are encouraged to use this history object, rather than creating their own,\n * as behavior may be undefined when managing history via multiple mechanisms/instances.\n *\n */\nexport const history = createBrowserHistory({basename: \"profile\"});\n\n/**\n * The default handler for the initialization lifecycle's `initError` phase.  Logs the error to the\n * LoggingService using `logError`\n *\n * @see {@link module:frontend-platform/logging~logError}\n * @param {*} error\n */\nexport async function initError(error) {\n  logError(error);\n}\n\n/**\n * The default handler for the initialization lifecycle's `auth` phase.\n *\n * The handler has several responsibilities:\n * - Determining the user's authentication state (authenticated or anonymous)\n * - Optionally redirecting to login if the application requires an authenticated user.\n * - Optionally loading additional user information via the application's user account data\n * endpoint.\n *\n * @param {boolean} requireUser Whether or not we should redirect to login if a user is not\n * authenticated.\n * @param {boolean} hydrateUser Whether or not we should fetch additional user account data.\n */\nexport async function auth(requireUser, hydrateUser) {\n  if (requireUser) {\n    await ensureAuthenticatedUser(global.location.href);\n  } else {\n    await fetchAuthenticatedUser();\n  }\n\n  if (hydrateUser && getAuthenticatedUser() !== null) {\n    // We intentionally do not await the promise returned by hydrateAuthenticatedUser. All the\n    // critical data is returned as part of fetch/ensureAuthenticatedUser above, and anything else\n    // is a nice-to-have for application code.\n    hydrateAuthenticatedUser();\n  }\n}\n\n\n/**\n * The default handler for the initialization lifecycle's `analytics` phase.\n *\n * The handler is responsible for identifying authenticated and anonymous users with the analytics\n * service.  This is a pre-requisite for sending analytics events, thus, we do it during the\n * initialization sequence so that analytics is ready once the application's UI code starts to load.\n *\n */\nexport async function analytics() {\n  const authenticatedUser = getAuthenticatedUser();\n  if (authenticatedUser && authenticatedUser.userId) {\n    identifyAuthenticatedUser(authenticatedUser.userId);\n  } else {\n    identifyAnonymousUser();\n  }\n}\n\nfunction applyOverrideHandlers(overrides) {\n  const noOp = async () => {};\n  return {\n    pubSub: noOp,\n    config: noOp,\n    logging: noOp,\n    auth,\n    analytics,\n    i18n: noOp,\n    ready: noOp,\n    initError,\n    ...overrides, // This will override any same-keyed handlers from above.\n  };\n}\n\n/**\n * Invokes the application initialization sequence.\n *\n * The sequence proceeds through a number of lifecycle phases, during which pertinent services are\n * configured.\n *\n * Using the `handlers` option, lifecycle phase handlers can be overridden to perform custom\n * functionality.  Note that while these override handlers _do_ replace the default handler\n * functionality for analytics, auth, and initError (the other phases have no default\n * functionality), they do _not_ override the configuration of the actual services that those\n * handlers leverage.\n *\n * Some services can be overridden via the loggingService and analyticsService options.  The other\n * services (auth and i18n) cannot currently be overridden.\n *\n * The following lifecycle phases exist:\n *\n * - pubSub: A no-op by default.\n * - config: A no-op by default.\n * - logging: A no-op by default.\n * - auth: Uses the 'auth' handler defined above.\n * - analytics: Uses the 'analytics' handler defined above.\n * - i18n: A no-op by default.\n * - ready: A no-op by default.\n * - initError: Uses the 'initError' handler defined above.\n *\n * @param {Object} [options]\n * @param {*} [options.loggingService=NewRelicLoggingService] The `LoggingService` implementation\n * to use.\n * @param {*} [options.analyticsService=SegmentAnalyticsService] The `AnalyticsService`\n * implementation to use.\n * @param {*} [options.requireAuthenticatedUser=false] If true, turns on automatic login\n * redirection for unauthenticated users.  Defaults to false, meaning that by default the\n * application will allow anonymous/unauthenticated sessions.\n * @param {*} [options.hydrateAuthenticatedUser=false] If true, makes an API call to the user\n * account endpoint (`${App.config.LMS_BASE_URL}/api/user/v1/accounts/${username}`) to fetch\n * detailed account information for the authenticated user. This data is merged into the return\n * value of `getAuthenticatedUser`, overriding any duplicate keys that already exist. Defaults to\n * false, meaning that no additional account information will be loaded.\n * @param {*} [options.messages] A i18n-compatible messages object, or an array of such objects. If\n * an array is provided, duplicate keys are resolved with the last-one-in winning.\n * @param {*} [options.handlers={}] An optional object of handlers which can be used to replace the\n * default behavior of any part of the startup sequence. It can also be used to add additional\n * initialization behavior before or after the rest of the sequence.\n */\nexport async function initialize({\n  loggingService = NewRelicLoggingService,\n  analyticsService = SegmentAnalyticsService,\n  requireAuthenticatedUser: requireUser = false,\n  hydrateAuthenticatedUser: hydrateUser = false,\n  messages,\n  handlers: overrideHandlers = {},\n}) {\n  const handlers = applyOverrideHandlers(overrideHandlers);\n  try {\n    // Pub/Sub\n    await handlers.pubSub();\n    publish(APP_PUBSUB_INITIALIZED);\n\n    // Configuration\n    await handlers.config();\n    publish(APP_CONFIG_INITIALIZED);\n\n    // Logging\n    configureLogging(loggingService, {\n      config: getConfig(),\n    });\n    await handlers.logging();\n    publish(APP_LOGGING_INITIALIZED);\n\n    // Authentication\n    configureAuth({\n      loggingService: getLoggingService(),\n      appBaseUrl: getConfig().BASE_URL,\n      lmsBaseUrl: getConfig().LMS_BASE_URL,\n      loginUrl: getConfig().LOGIN_URL,\n      logoutUrl: getConfig().LOGIN_URL,\n      refreshAccessTokenEndpoint: getConfig().REFRESH_ACCESS_TOKEN_ENDPOINT,\n      accessTokenCookieName: getConfig().ACCESS_TOKEN_COOKIE_NAME,\n      csrfTokenApiPath: getConfig().CSRF_TOKEN_API_PATH,\n    });\n    await handlers.auth(requireUser, hydrateUser);\n    publish(APP_AUTH_INITIALIZED);\n\n    // Analytics\n    configureAnalytics(analyticsService, {\n      config: getConfig(),\n      loggingService: getLoggingService(),\n      httpClient: getAuthenticatedHttpClient(),\n    });\n    await handlers.analytics();\n    publish(APP_ANALYTICS_INITIALIZED);\n\n    // Internationalization\n    configureI18n({\n      messages,\n      config: getConfig(),\n      loggingService: getLoggingService(),\n    });\n    await handlers.i18n();\n    publish(APP_I18N_INITIALIZED);\n\n    // Application Ready\n    await handlers.ready();\n    publish(APP_READY);\n  } catch (error) {\n    if (!error.isRedirecting) {\n      // Initialization Error\n      console.log(error);\n      await handlers.initError(error);\n      publish(APP_INIT_ERROR, error);\n    }\n  }\n}\n"],"file":"initialize.js"}