{"version":3,"sources":["../src/initialize.js"],"names":["createBrowserHistory","createMemoryHistory","publish","getConfig","setConfig","mergeConfig","configure","configureLogging","getLoggingService","NewRelicLoggingService","logError","configureAnalytics","SegmentAnalyticsService","identifyAnonymousUser","identifyAuthenticatedUser","getAuthenticatedHttpClient","configureAuth","ensureAuthenticatedUser","fetchAuthenticatedUser","hydrateAuthenticatedUser","getAuthenticatedUser","AxiosJwtAuthService","configureI18n","APP_PUBSUB_INITIALIZED","APP_CONFIG_INITIALIZED","APP_AUTH_INITIALIZED","APP_I18N_INITIALIZED","APP_LOGGING_INITIALIZED","APP_ANALYTICS_INITIALIZED","APP_READY","APP_INIT_ERROR","getHttpConfig","history","window","basename","PUBLIC_PATH","initError","error","auth","requireUser","hydrateUser","global","location","href","configTenant","tenant","hostname","data","document","querySelector","common","FAVICON_URL","console","log","mfeRef","pathname","split","additionalConfig","BASE_URL","host","LANGUAGE_PREFERENCE_COOKIE_NAME","analytics","authenticatedUser","userId","applyOverrideHandlers","overrides","noOp","pubSub","config","logging","i18n","ready","initialize","loggingService","analyticsService","authService","requireAuthenticatedUser","messages","handlers","overrideHandlers","MFE_CONFIG_API_URL","httpClient","isRedirecting"],"mappings":"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","sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform**\n *\n * The initialization module provides a function for managing an application's initialization\n * lifecycle.  It also provides constants and default handler implementations.\n *\n * ```\n * import {\n *   initialize,\n *   APP_INIT_ERROR,\n *   APP_READY,\n *   subscribe,\n * } from '@edx/frontend-platform';\n * import { AppProvider, ErrorPage, PageRoute } from '@edx/frontend-platform/react';\n * import React from 'react';\n * import ReactDOM from 'react-dom';\n * import { Switch } from 'react-router-dom';\n *\n * subscribe(APP_READY, () => {\n *   ReactDOM.render(\n *     <AppProvider store={configureStore()}>\n *       <Header />\n *       <main>\n *         <Switch>\n *           <PageRoute exact path=\"/\" component={PaymentPage} />\n *         </Switch>\n *       </main>\n *       <Footer />\n *     </AppProvider>,\n *     document.getElementById('root'),\n *   );\n * });\n *\n * subscribe(APP_INIT_ERROR, (error) => {\n *   ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n * });\n *\n * initialize({\n *   messages: [appMessages],\n *   requireAuthenticatedUser: true,\n *   hydrateAuthenticatedUser: true,\n * });\n\n```\n * @module Initialization\n */\n\nimport { createBrowserHistory, createMemoryHistory } from 'history';\nimport {\n  publish,\n} from './pubSub';\n// eslint-disable-next-line import/no-cycle\nimport { getConfig, setConfig, mergeConfig } from './config';\nimport {\n  configure as configureLogging, getLoggingService, NewRelicLoggingService, logError,\n} from './logging';\nimport {\n  configure as configureAnalytics, SegmentAnalyticsService, identifyAnonymousUser, identifyAuthenticatedUser,\n} from './analytics';\nimport {\n  getAuthenticatedHttpClient,\n  configure as configureAuth,\n  ensureAuthenticatedUser,\n  fetchAuthenticatedUser,\n  hydrateAuthenticatedUser,\n  getAuthenticatedUser,\n  AxiosJwtAuthService,\n} from './auth';\nimport { configure as configureI18n } from './i18n';\nimport {\n  APP_PUBSUB_INITIALIZED,\n  APP_CONFIG_INITIALIZED,\n  APP_AUTH_INITIALIZED,\n  APP_I18N_INITIALIZED,\n  APP_LOGGING_INITIALIZED,\n  APP_ANALYTICS_INITIALIZED,\n  APP_READY, APP_INIT_ERROR,\n} from './constants';\nimport { getHttpConfig } from './initialize/data';\n\n/**\n * A browser history or memory history object created by the [history](https://github.com/ReactTraining/history)\n * package.  Applications are encouraged to use this history object, rather than creating their own,\n * as behavior may be undefined when managing history via multiple mechanisms/instances. Note that\n * in environments where browser history may be inaccessible due to `window` being undefined, this\n * falls back to memory history.\n */\nexport const history = (typeof window !== 'undefined')\n  ? createBrowserHistory({\n    basename: getConfig().PUBLIC_PATH,\n  }) : createMemoryHistory();\n\n/**\n * The default handler for the initialization lifecycle's `initError` phase.  Logs the error to the\n * LoggingService using `logError`\n *\n * @see {@link module:frontend-platform/logging~logError}\n * @param {*} error\n */\nexport async function initError(error) {\n  logError(error);\n}\n\n/**\n * The default handler for the initialization lifecycle's `auth` phase.\n *\n * The handler has several responsibilities:\n * - Determining the user's authentication state (authenticated or anonymous)\n * - Optionally redirecting to login if the application requires an authenticated user.\n * - Optionally loading additional user information via the application's user account data\n * endpoint.\n *\n * @param {boolean} requireUser Whether or not we should redirect to login if a user is not\n * authenticated.\n * @param {boolean} hydrateUser Whether or not we should fetch additional user account data.\n */\nexport async function auth(requireUser, hydrateUser) {\n  if (requireUser) {\n    await ensureAuthenticatedUser(global.location.href);\n  } else {\n    await fetchAuthenticatedUser();\n  }\n\n  if (hydrateUser && getAuthenticatedUser() !== null) {\n    // We intentionally do not await the promise returned by hydrateAuthenticatedUser. All the\n    // critical data is returned as part of fetch/ensureAuthenticatedUser above, and anything else\n    // is a nice-to-have for application code.\n    hydrateAuthenticatedUser();\n  }\n}\n\nexport async function configTenant() {\n  try {\n    const tenant = window.location.hostname;\n    const data = await getHttpConfig(tenant);\n    if (document.querySelector('link[rel=\"shortcut icon\"]') && data.common?.FAVICON_URL) {\n      document.querySelector('link[rel=\"shortcut icon\"]').href = data.common.FAVICON_URL;\n    }\n    console.log(data)\n    const mfeRef = window.location.pathname.split('/')[1];\n    const additionalConfig = data[mfeRef] ? data[mfeRef] : null;\n    mergeConfig({\n      BASE_URL: `${window.location.host}${mfeRef && ('/' + mfeRef)}`,\n      ...data?.common,\n      ...additionalConfig\n    })\n\n  } catch (e) {\n    // This is an option set some basic values an display the error page with the default message\n    // or we can redirect the user with history.goBack()\n    setConfig({\n      BASE_URL: `${window.location.host}`,\n      LANGUAGE_PREFERENCE_COOKIE_NAME: 'openedx-language-preference',\n    })\n  }\n}\n/**\n * The default handler for the initialization lifecycle's `analytics` phase.\n *\n * The handler is responsible for identifying authenticated and anonymous users with the analytics\n * service.  This is a pre-requisite for sending analytics events, thus, we do it during the\n * initialization sequence so that analytics is ready once the application's UI code starts to load.\n *\n */\nexport async function analytics() {\n  const authenticatedUser = getAuthenticatedUser();\n  if (authenticatedUser && authenticatedUser.userId) {\n    identifyAuthenticatedUser(authenticatedUser.userId);\n  } else {\n    await identifyAnonymousUser();\n  }\n}\n\nfunction applyOverrideHandlers(overrides) {\n  const noOp = async () => { };\n  return {\n    pubSub: noOp,\n    configTenant,\n    config: noOp,\n    logging: noOp,\n    auth,\n    analytics,\n    i18n: noOp,\n    ready: noOp,\n    initError,\n    ...overrides, // This will override any same-keyed handlers from above.\n  };\n}\n\n/**\n * Invokes the application initialization sequence.\n *\n * The sequence proceeds through a number of lifecycle phases, during which pertinent services are\n * configured.\n *\n * Using the `handlers` option, lifecycle phase handlers can be overridden to perform custom\n * functionality.  Note that while these override handlers _do_ replace the default handler\n * functionality for analytics, auth, and initError (the other phases have no default\n * functionality), they do _not_ override the configuration of the actual services that those\n * handlers leverage.\n *\n * Some services can be overridden via the loggingService and analyticsService options.  The other\n * services (auth and i18n) cannot currently be overridden.\n *\n * The following lifecycle phases exist:\n *\n * - pubSub: A no-op by default.\n * - config: A no-op by default.\n * - logging: A no-op by default.\n * - auth: Uses the 'auth' handler defined above.\n * - analytics: Uses the 'analytics' handler defined above.\n * - i18n: A no-op by default.\n * - ready: A no-op by default.\n * - initError: Uses the 'initError' handler defined above.\n *\n * @param {Object} [options]\n * @param {*} [options.loggingService=NewRelicLoggingService] The `LoggingService` implementation\n * to use.\n * @param {*} [options.analyticsService=SegmentAnalyticsService] The `AnalyticsService`\n * implementation to use.\n * @param {*} [options.requireAuthenticatedUser=false] If true, turns on automatic login\n * redirection for unauthenticated users.  Defaults to false, meaning that by default the\n * application will allow anonymous/unauthenticated sessions.\n * @param {*} [options.hydrateAuthenticatedUser=false] If true, makes an API call to the user\n * account endpoint (`${App.config.LMS_BASE_URL}/api/user/v1/accounts/${username}`) to fetch\n * detailed account information for the authenticated user. This data is merged into the return\n * value of `getAuthenticatedUser`, overriding any duplicate keys that already exist. Defaults to\n * false, meaning that no additional account information will be loaded.\n * @param {*} [options.messages] A i18n-compatible messages object, or an array of such objects. If\n * an array is provided, duplicate keys are resolved with the last-one-in winning.\n * @param {*} [options.handlers={}] An optional object of handlers which can be used to replace the\n * default behavior of any part of the startup sequence. It can also be used to add additional\n * initialization behavior before or after the rest of the sequence.\n */\nexport async function initialize({\n  loggingService = NewRelicLoggingService,\n  analyticsService = SegmentAnalyticsService,\n  authService = AxiosJwtAuthService,\n  requireAuthenticatedUser: requireUser = false,\n  hydrateAuthenticatedUser: hydrateUser = false,\n  messages,\n  handlers: overrideHandlers = {},\n}) {\n  const handlers = applyOverrideHandlers(overrideHandlers);\n  try {\n    // Pub/Sub\n    await handlers.pubSub();\n    publish(APP_PUBSUB_INITIALIZED);\n\n    // Configuration\n    getConfig().MFE_CONFIG_API_URL ? await handlers.configTenant() : await handlers.config();\n    console.log(getConfig())\n    publish(APP_CONFIG_INITIALIZED);\n\n    // Logging\n    configureLogging(loggingService, {\n      config: getConfig(),\n    });\n    await handlers.logging();\n\n    publish(APP_LOGGING_INITIALIZED);\n\n    // Authentication\n    configureAuth(authService, {\n      loggingService: getLoggingService(),\n      config: getConfig(),\n    });\n    await handlers.auth(requireUser, hydrateUser);\n    publish(APP_AUTH_INITIALIZED);\n\n    // Analytics\n    configureAnalytics(analyticsService, {\n      config: getConfig(),\n      loggingService: getLoggingService(),\n      httpClient: getAuthenticatedHttpClient(),\n    });\n    await handlers.analytics();\n    publish(APP_ANALYTICS_INITIALIZED);\n\n    // Internationalization\n    configureI18n({\n      messages,\n      config: getConfig(),\n      loggingService: getLoggingService(),\n    });\n    await handlers.i18n();\n    publish(APP_I18N_INITIALIZED);\n\n    // Application Ready\n    await handlers.ready();\n    publish(APP_READY);\n  } catch (error) {\n    if (!error.isRedirecting) {\n      // Initialization Error\n      await handlers.initError(error);\n      publish(APP_INIT_ERROR, error);\n    }\n  }\n}\n"],"file":"initialize.js"}