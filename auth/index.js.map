{"version":3,"sources":["../../src/auth/index.js"],"names":["axios","PropTypes","logFrontendAuthError","addAuthenticationToHttpClient","getJwtToken","camelCaseObject","ensureDefinedConfig","publish","AUTHENTICATED_USER_TOPIC","AUTHENTICATED_USER_CHANGED","authenticatedHttpClient","config","authenticatedUser","configPropTypes","appBaseUrl","string","isRequired","lmsBaseUrl","loginUrl","logoutUrl","refreshAccessTokenEndpoint","accessTokenCookieName","csrfTokenApiPath","loggingService","shape","logError","func","logInfo","configure","options","checkPropTypes","create","getLoggingService","getAuthenticatedHttpClient","redirectToLogin","redirectUrl","global","location","assign","encodeURIComponent","redirectToLogout","getAuthenticatedUser","setAuthenticatedUser","authUser","fetchAuthenticatedUser","decodedAccessToken","userId","user_id","username","preferred_username","roles","administrator","ensureAuthenticatedUser","isRedirectFromLoginPage","document","referrer","startsWith","redirectLoopError","Error","unauthorizedError","isRedirecting","hydrateAuthenticatedUser","user","get","response","data"],"mappings":"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","sourcesContent":["/**\n * #### Import members from **@edx/frontend-platform/auth**\n * Simplifies the process of making authenticated API requests to backend edX services by providing\n * common authN/authZ client code that enables the login/logout flow and handles ensuring the\n * presence of a valid [JWT cookie](https://github.com/edx/edx-platform/blob/master/openedx/core/djangoapps/oauth_dispatch/docs/decisions/0009-jwt-in-session-cookie.rst).\n *\n * The `initialize` function performs much of the auth configuration for you.  If, however, you're\n * not using the `initialize` function, an authenticated API client can be created via:\n *\n * ```\n * import {\n *   configure,\n *   fetchAuthenticatedUser,\n *   getAuthenticatedHttpClient\n * } from '@edx/frontend-platform/auth';\n * import { getConfig } from '@edx/frontend-platform';\n * import { getLoggingService } from '@edx/frontend-platform/logging';\n *\n * const {\n *   BASE_URL,\n *   LMS_BASE_URL,\n *   LOGIN_URL,\n *   LOGIN_URL,\n *   REFRESH_ACCESS_TOKEN_ENDPOINT,\n *   ACCESS_TOKEN_COOKIE_NAME,\n *   CSRF_TOKEN_API_PATH,\n * } = getConfig();\n *\n * configure({\n *   loggingService: getLoggingService(),\n *   appBaseUrl: BASE_URL,\n *   lmsBaseUrl: LMS_BASE_URL,\n *   loginUrl: LOGIN_URL,\n *   logoutUrl: LOGIN_URL,\n *   refreshAccessTokenEndpoint: REFRESH_ACCESS_TOKEN_ENDPOINT,\n *   accessTokenCookieName: ACCESS_TOKEN_COOKIE_NAME,\n *   csrfTokenApiPath: CSRF_TOKEN_API_PATH,\n * });\n *\n * const authenticatedUser = await fetchAuthenticatedUser(); // validates and decodes JWT token\n * const authenticatedHttpClient = getAuthenticatedHttpClient();\n * const response = await getAuthenticatedHttpClient().get(`https://example.com/api/user/data/${authenticatedUser.username}`); // fetching from an authenticated API using user data\n * ```\n *\n * As shown in this example, auth depends on the configuration document and logging.\n *\n * @module Auth\n */\n\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { logFrontendAuthError } from './utils';\nimport addAuthenticationToHttpClient from './addAuthenticationToHttpClient';\nimport getJwtToken from './getJwtToken';\nimport { camelCaseObject, ensureDefinedConfig } from '../utils';\n\nimport { publish } from '../pubSub';\n\n/**\n * @constant\n * @private\n */\nexport const AUTHENTICATED_USER_TOPIC = 'AUTHENTICATED_USER';\n\n/**\n * Published when the authenticated user data changes.  This can happen when the authentication\n * service determines that the user is authenticated or anonymous, as well as when we fetch\n * additional user account data if the `hydrateAuthenticatedUser` flag has been set in the\n * `initialize` function.\n *\n * @event\n * @see {@link module:Initialization~initialize}\n */\nexport const AUTHENTICATED_USER_CHANGED = `${AUTHENTICATED_USER_TOPIC}.CHANGED`;\n\n// Singletons\nlet authenticatedHttpClient = null;\nlet config = null;\nlet authenticatedUser = null;\n\nconst configPropTypes = {\n  appBaseUrl: PropTypes.string.isRequired,\n  lmsBaseUrl: PropTypes.string.isRequired,\n  loginUrl: PropTypes.string.isRequired,\n  logoutUrl: PropTypes.string.isRequired,\n  refreshAccessTokenEndpoint: PropTypes.string.isRequired,\n  accessTokenCookieName: PropTypes.string.isRequired,\n  csrfTokenApiPath: PropTypes.string.isRequired,\n  loggingService: PropTypes.shape({\n    logError: PropTypes.func.isRequired,\n    logInfo: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\n/**\n * Configures an httpClient to make authenticated http requests.\n *\n * @param {Object} options\n * @param {string} options.appBaseUrl\n * @param {string} options.lmsBaseUrl\n * @param {string} options.loginUrl\n * @param {string} options.logoutUrl\n * @param {Object} options.loggingService requires logError and logInfo methods\n * @param {string} options.refreshAccessTokenEndpoint\n * @param {string} options.accessTokenCookieName\n * @param {string} options.csrfTokenApiPath\n */\nexport function configure(options) {\n  ensureDefinedConfig(options, 'AuthService');\n\n  PropTypes.checkPropTypes(configPropTypes, options, 'options', 'AuthService');\n  config = options;\n  authenticatedHttpClient = addAuthenticationToHttpClient(axios.create(), config);\n}\n\n\n/**\n * @ignore\n * @returns {LoggingService}\n */\nexport function getLoggingService() {\n  return config.loggingService;\n}\n\n/**\n * Gets the apiClient singleton which is an axios instance.\n *\n * @returns {HttpClient} Singleton. A configured axios http client\n */\nexport function getAuthenticatedHttpClient() {\n  return authenticatedHttpClient;\n}\n\n/**\n * Redirect the user to login\n *\n * @param {string} redirectUrl the url to redirect to after login\n */\nexport function redirectToLogin(redirectUrl = config.appBaseUrl) {\n  global.location.assign(`${config.loginUrl}?next=${encodeURIComponent(redirectUrl)}`);\n}\n\n/**\n * Redirect the user to logout\n *\n * @param {string} redirectUrl the url to redirect to after logout\n */\nexport function redirectToLogout(redirectUrl = config.appBaseUrl) {\n  global.location.assign(`${config.logoutUrl}?redirect_url=${encodeURIComponent(redirectUrl)}`);\n}\n\n/**\n * If it exists, returns the user data representing the currently authenticated user. If the user is\n * anonymous, returns null.\n *\n * @returns {UserData|null}\n */\nexport function getAuthenticatedUser() {\n  return authenticatedUser;\n}\n\n/**\n * Sets the authenticated user to the provided value.\n *\n * @param {UserData} authUser\n * @emits AUTHENTICATED_USER_CHANGED\n */\nexport function setAuthenticatedUser(authUser) {\n  authenticatedUser = authUser;\n  publish(AUTHENTICATED_USER_CHANGED);\n}\n\n/**\n * Reads the authenticated user's access token. Resolves to null if the user is\n * unauthenticated.\n *\n * @returns {Promise<UserData>|Promise<null>} Resolves to the user's access token if they are\n * logged in.\n */\nexport async function fetchAuthenticatedUser() {\n  const decodedAccessToken = await getJwtToken(\n    config.accessTokenCookieName,\n    config.refreshAccessTokenEndpoint,\n  );\n\n  if (decodedAccessToken !== null) {\n    setAuthenticatedUser({\n      userId: decodedAccessToken.user_id,\n      username: decodedAccessToken.preferred_username,\n      roles: decodedAccessToken.roles || [],\n      administrator: decodedAccessToken.administrator,\n    });\n  }\n\n  return getAuthenticatedUser();\n}\n\n/**\n * Ensures a user is authenticated. It will redirect to login when not\n * authenticated.\n *\n * @param {string} [redirectUrl=config.appBaseUrl] to return user after login when not\n * authenticated.\n * @returns {Promise<UserData>}\n */\nexport async function ensureAuthenticatedUser(redirectUrl = config.appBaseUrl) {\n  await fetchAuthenticatedUser();\n\n  if (getAuthenticatedUser() === null) {\n    const isRedirectFromLoginPage = global.document.referrer &&\n      global.document.referrer.startsWith(config.loginUrl);\n\n    if (isRedirectFromLoginPage) {\n      const redirectLoopError = new Error('Redirect from login page. Rejecting to avoid infinite redirect loop.');\n      logFrontendAuthError(redirectLoopError);\n      throw redirectLoopError;\n    }\n\n    // The user is not authenticated, send them to the login page.\n    redirectToLogin(redirectUrl);\n\n    const unauthorizedError = new Error('Failed to ensure the user is authenticated');\n    unauthorizedError.isRedirecting = true;\n    throw unauthorizedError;\n  }\n\n  return getAuthenticatedUser();\n}\n\n/**\n * Fetches additional user account information for the authenticated user and merges it into the\n * existing authenticatedUser object, available via getAuthenticatedUser().\n *\n * ```\n *  console.log(authenticatedUser); // Will be sparse and only contain basic information.\n *  await hydrateAuthenticatedUser()\n *  const authenticatedUser = getAuthenticatedUser();\n *  console.log(authenticatedUser); // Will contain additional user information\n * ```\n *\n * @returns {Promise<null>}\n */\nexport async function hydrateAuthenticatedUser() {\n  const user = getAuthenticatedUser();\n  if (user !== null) {\n    const response = await authenticatedHttpClient\n      .get(`${config.lmsBaseUrl}/api/user/v1/accounts/${user.username}`);\n    setAuthenticatedUser({ ...user, ...camelCaseObject(response.data) });\n  }\n}\n\n/**\n * A configured axios client. See axios docs for more\n * info https://github.com/axios/axios. All the functions\n * below accept isPublic and isCsrfExempt in the request\n * config options. Setting these to true will prevent this\n * client from attempting to refresh the jwt access token\n * or a csrf token respectively.\n *\n * ```\n *  // A public endpoint (no jwt token refresh)\n *  apiClient.get('/path/to/endpoint', { isPublic: true });\n * ```\n *\n * ```\n *  // A csrf exempt endpoint\n *  apiClient.post('/path/to/endpoint', { data }, { isCsrfExempt: true });\n * ```\n *\n * @name HttpClient\n * @interface\n * @memberof module:Auth\n * @property {function} get\n * @property {function} head\n * @property {function} options\n * @property {function} delete (csrf protected)\n * @property {function} post (csrf protected)\n * @property {function} put (csrf protected)\n * @property {function} patch (csrf protected)\n */\n\n/**\n * @name UserData\n * @interface\n * @memberof module:Auth\n * @property {string} userId\n * @property {string} username\n * @property {Array} roles\n * @property {boolean} administrator\n */\n"],"file":"index.js"}