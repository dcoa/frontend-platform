{"version":3,"sources":["../../src/auth/getCsrfToken.js"],"names":["axios","getUrlParts","processAxiosErrorAndThrow","httpClient","create","defaults","withCredentials","headers","common","csrfTokenCache","csrfTokenRequestPromises","getCsrfToken","url","csrfTokenApiPath","urlParts","e","global","location","origin","protocol","domain","csrfToken","get","then","response","data","clearCsrfTokenCache"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,yBAAtB,QAAuD,SAAvD;AAEA,IAAMC,UAAU,GAAGH,KAAK,CAACI,MAAN,EAAnB,C,CACA;AACA;AACA;AACA;;AACAD,UAAU,CAACE,QAAX,CAAoBC,eAApB,GAAsC,IAAtC;AACAH,UAAU,CAACE,QAAX,CAAoBE,OAApB,CAA4BC,MAA5B,CAAmC,gBAAnC,IAAuD,IAAvD;AAEA,IAAIC,cAAc,GAAG,EAArB;AACA,IAAMC,wBAAwB,GAAG,EAAjC;;AAEA,IAAMC,YAAY;AAAA,qEAAG,iBAAOC,GAAP,EAAYC,gBAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEnB,gBAAI;AACFC,cAAAA,QAAQ,GAAGb,WAAW,CAACW,GAAD,CAAtB;AACD,aAFD,CAEE,OAAOG,CAAP,EAAU;AACV;AACA;AACA;AACAD,cAAAA,QAAQ,GAAGb,WAAW,CAACe,MAAM,CAACC,QAAP,CAAgBC,MAAjB,CAAtB;AACD;;AATkB,wBAWUJ,QAXV,EAWXK,QAXW,aAWXA,QAXW,EAWDC,MAXC,aAWDA,MAXC;AAYbC,YAAAA,SAZa,GAYDZ,cAAc,CAACW,MAAD,CAZb;;AAAA,iBAcfC,SAde;AAAA;AAAA;AAAA;;AAAA,6CAeVA,SAfU;;AAAA;AAkBnB,gBAAI,CAACX,wBAAwB,CAACU,MAAD,CAA7B,EAAuC;AACrCV,cAAAA,wBAAwB,CAACU,MAAD,CAAxB,GAAmCjB,UAAU,CAC1CmB,GADgC,WACzBH,QADyB,gBACXC,MADW,SACFP,gBADE,GAEhCU,IAFgC,CAE3B,UAACC,QAAD,EAAc;AAClBf,gBAAAA,cAAc,CAACW,MAAD,CAAd,GAAyBI,QAAQ,CAACC,IAAT,CAAcJ,SAAvC;AACA,uBAAOZ,cAAc,CAACW,MAAD,CAArB;AACD,eALgC,WAM1BlB,yBAN0B,aAOxB,YAAM;AACb,uBAAOQ,wBAAwB,CAACU,MAAD,CAA/B;AACD,eATgC,CAAnC;AAUD;;AA7BkB,6CA+BZV,wBAAwB,CAACU,MAAD,CA/BZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZT,YAAY;AAAA;AAAA;AAAA,GAAlB;;AAkCA,IAAMe,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCjB,EAAAA,cAAc,GAAG,EAAjB;AACD,CAFD;;AAIA,eAAeE,YAAf;AACA,SAASR,UAAT,EAAqBuB,mBAArB","sourcesContent":["import axios from 'axios';\nimport { getUrlParts, processAxiosErrorAndThrow } from './utils';\n\nconst httpClient = axios.create();\n// Set withCredentials to true. Enables cross-site Access-Control requests\n// to be made using cookies, authorization headers or TLS client\n// certificates. More on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials\nhttpClient.defaults.withCredentials = true;\nhttpClient.defaults.headers.common['USE-JWT-COOKIE'] = true;\n\nlet csrfTokenCache = {};\nconst csrfTokenRequestPromises = {};\n\nconst getCsrfToken = async (url, csrfTokenApiPath) => {\n  let urlParts;\n  try {\n    urlParts = getUrlParts(url);\n  } catch (e) {\n    // If the url is not parsable it's likely because a relative\n    // path was supplied as the url. This is acceptable and in\n    // this case we should use the current origin of the page.\n    urlParts = getUrlParts(global.location.origin);\n  }\n\n  const { protocol, domain } = urlParts;\n  const csrfToken = csrfTokenCache[domain];\n\n  if (csrfToken) {\n    return csrfToken;\n  }\n\n  if (!csrfTokenRequestPromises[domain]) {\n    csrfTokenRequestPromises[domain] = httpClient\n      .get(`${protocol}://${domain}${csrfTokenApiPath}`)\n      .then((response) => {\n        csrfTokenCache[domain] = response.data.csrfToken;\n        return csrfTokenCache[domain];\n      })\n      .catch(processAxiosErrorAndThrow)\n      .finally(() => {\n        delete csrfTokenRequestPromises[domain];\n      });\n  }\n\n  return csrfTokenRequestPromises[domain];\n};\n\nconst clearCsrfTokenCache = () => {\n  csrfTokenCache = {};\n};\n\nexport default getCsrfToken;\nexport { httpClient, clearCsrfTokenCache };\n"],"file":"getCsrfToken.js"}