{"version":3,"sources":["../../../src/auth/interceptors/createJwtTokenProviderInterceptor.js"],"names":["getJwtToken","createJwtTokenProviderInterceptor","options","tokenCookieName","tokenRefreshEndpoint","shouldSkip","interceptor","axiosRequestConfig","requestError","Object","create","message","config","Promise","reject","headers","common"],"mappings":";;;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;;AAEA,IAAMC,iCAAiC,GAAG,SAApCA,iCAAoC,CAACC,OAAD,EAAa;AAAA,MAEnDC,eAFmD,GAKjDD,OALiD,CAEnDC,eAFmD;AAAA,MAGnDC,oBAHmD,GAKjDF,OALiD,CAGnDE,oBAHmD;AAAA,MAInDC,UAJmD,GAKjDH,OALiD,CAInDG,UAJmD,EAOrD;AACA;;AACA,MAAMC,WAAW;AAAA,uEAAG,iBAAOC,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdF,UAAU,CAACE,kBAAD,CADI;AAAA;AAAA;AAAA;;AAAA,+CAETA,kBAFS;;AAAA;AAAA;AAAA;AAAA,qBAWVP,WAAW,CAACG,eAAD,EAAkBC,oBAAlB,CAXD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaVI,cAAAA,YAbU,GAaKC,MAAM,CAACC,MAAP,aAbL;AAchBF,cAAAA,YAAY,CAACG,OAAb,2BAAwCH,YAAY,CAACG,OAArD,EAdgB,CAehB;;AACAH,cAAAA,YAAY,CAACI,MAAb,GAAsBL,kBAAtB;AAhBgB,+CAiBTM,OAAO,CAACC,MAAR,CAAeN,YAAf,CAjBS;;AAAA;AAoBlB;AACA;AACAD,cAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,MAA3B,CAAkC,gBAAlC,IAAsD,IAAtD;AAtBkB,+CAuBXT,kBAvBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXD,WAAW;AAAA;AAAA;AAAA,KAAjB;;AA0BA,SAAOA,WAAP;AACD,CApCD;;AAsCA,eAAeL,iCAAf","sourcesContent":["import getJwtToken from '../getJwtToken';\n\nconst createJwtTokenProviderInterceptor = (options) => {\n  const {\n    tokenCookieName,\n    tokenRefreshEndpoint,\n    shouldSkip,\n  } = options;\n\n  // Creating the interceptor inside this closure to\n  // maintain reference to the options supplied.\n  const interceptor = async (axiosRequestConfig) => {\n    if (shouldSkip(axiosRequestConfig)) {\n      return axiosRequestConfig;\n    }\n\n    // Important: the job of this interceptor is to refresh a jwt token and update\n    // the original request configuration. Errors thrown from fetching the jwt\n    // should contain the original request config. This allows other interceptors\n    // (namely our retry request interceptor below) to access the original request\n    // and handle it appropriately\n    try {\n      await getJwtToken(tokenCookieName, tokenRefreshEndpoint);\n    } catch (error) {\n      const requestError = Object.create(error);\n      requestError.message = `[getJwtToken] ${requestError.message}`;\n      // Important: return the original axios request config\n      requestError.config = axiosRequestConfig;\n      return Promise.reject(requestError);\n    }\n\n    // Add the proper headers to tell the server to look for the jwt cookie\n    // eslint-disable-next-line no-param-reassign\n    axiosRequestConfig.headers.common['USE-JWT-COOKIE'] = true;\n    return axiosRequestConfig;\n  };\n\n  return interceptor;\n};\n\nexport default createJwtTokenProviderInterceptor;\n"],"file":"createJwtTokenProviderInterceptor.js"}