{"version":3,"sources":["../../../src/auth/interceptors/processAxiosRequestErrorInterceptor.js"],"names":["getLoggingService","processAxiosError","processAxiosRequestErrorInterceptor","error","processedError","httpErrorStatus","customAttributes","logInfo","Promise","reject"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,UAAlC;AACA,SAASC,iBAAT,QAAkC,UAAlC;;AAEA,IAAMC,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACC,KAAD,EAAW;AACrD,MAAMC,cAAc,GAAGH,iBAAiB,CAACE,KAAD,CAAxC;AADqD,MAE7CE,eAF6C,GAEzBD,cAAc,CAACE,gBAFU,CAE7CD,eAF6C;;AAGrD,MAAIA,eAAe,KAAK,GAApB,IAA2BA,eAAe,KAAK,GAAnD,EAAwD;AACtDL,IAAAA,iBAAiB,GAAGO,OAApB,CAA4BH,cAA5B,EAA4CA,cAAc,CAACE,gBAA3D;AACD;;AACD,SAAOE,OAAO,CAACC,MAAR,CAAeL,cAAf,CAAP;AACD,CAPD;;AASA,eAAeF,mCAAf","sourcesContent":["import { getLoggingService } from '../index';\nimport { processAxiosError } from '../utils';\n\nconst processAxiosRequestErrorInterceptor = (error) => {\n  const processedError = processAxiosError(error);\n  const { httpErrorStatus } = processedError.customAttributes;\n  if (httpErrorStatus === 401 || httpErrorStatus === 403) {\n    getLoggingService().logInfo(processedError, processedError.customAttributes);\n  }\n  return Promise.reject(processedError);\n};\n\nexport default processAxiosRequestErrorInterceptor;\n"],"file":"processAxiosRequestErrorInterceptor.js"}