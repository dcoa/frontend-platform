{"version":3,"sources":["../../../src/auth/interceptors/createCsrfTokenProviderInterceptor.js"],"names":["getCsrfToken","createCsrfTokenProviderInterceptor","options","csrfTokenApiPath","shouldSkip","interceptor","axiosRequestConfig","url","csrfToken","requestError","Object","create","message","config","Promise","reject","CSRF_HEADER_NAME","headers"],"mappings":";;;;AAAA,OAAOA,YAAP,MAAyB,iBAAzB;;AAEA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CAACC,OAAD,EAAa;AAAA,MAC9CC,gBAD8C,GACbD,OADa,CAC9CC,gBAD8C;AAAA,MAC5BC,UAD4B,GACbF,OADa,CAC5BE,UAD4B,EAGtD;AACA;;AACA,MAAMC,WAAW;AAAA,uEAAG,iBAAOC,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdF,UAAU,CAACE,kBAAD,CADI;AAAA;AAAA;AAAA;;AAAA,+CAETA,kBAFS;;AAAA;AAIVC,cAAAA,GAJU,GAIFD,kBAJE,CAIVC,GAJU;AAAA;AAAA;AAAA,qBAaEP,YAAY,CAACO,GAAD,EAAMJ,gBAAN,CAbd;;AAAA;AAahBK,cAAAA,SAbgB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeVC,cAAAA,YAfU,GAeKC,MAAM,CAACC,MAAP,aAfL;AAgBhBF,cAAAA,YAAY,CAACG,OAAb,4BAAyCH,YAAY,CAACG,OAAtD,EAhBgB,CAiBhB;;AACAH,cAAAA,YAAY,CAACI,MAAb,GAAsBP,kBAAtB;AAlBgB,+CAmBTQ,OAAO,CAACC,MAAR,CAAeN,YAAf,CAnBS;;AAAA;AAsBZO,cAAAA,gBAtBY,GAsBO,aAtBP,EAuBlB;;AACAV,cAAAA,kBAAkB,CAACW,OAAnB,CAA2BD,gBAA3B,IAA+CR,SAA/C;AAxBkB,+CAyBXF,kBAzBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXD,WAAW;AAAA;AAAA;AAAA,KAAjB;;AA4BA,SAAOA,WAAP;AACD,CAlCD;;AAoCA,eAAeJ,kCAAf","sourcesContent":["import getCsrfToken from '../getCsrfToken';\n\nconst createCsrfTokenProviderInterceptor = (options) => {\n  const { csrfTokenApiPath, shouldSkip } = options;\n\n  // Creating the interceptor inside this closure to\n  // maintain reference to the options supplied.\n  const interceptor = async (axiosRequestConfig) => {\n    if (shouldSkip(axiosRequestConfig)) {\n      return axiosRequestConfig;\n    }\n    const { url } = axiosRequestConfig;\n    let csrfToken;\n\n    // Important: the job of this interceptor is to get a csrf token and update\n    // the original request configuration. Errors thrown getting the csrf token\n    // should contain the original request config. This allows other interceptors\n    // (namely our retry request interceptor below) to access the original request\n    // and handle it appropriately\n    try {\n      csrfToken = await getCsrfToken(url, csrfTokenApiPath);\n    } catch (error) {\n      const requestError = Object.create(error);\n      requestError.message = `[getCsrfToken] ${requestError.message}`;\n      // Important: return the original axios request config\n      requestError.config = axiosRequestConfig;\n      return Promise.reject(requestError);\n    }\n\n    const CSRF_HEADER_NAME = 'X-CSRFToken';\n    // eslint-disable-next-line no-param-reassign\n    axiosRequestConfig.headers[CSRF_HEADER_NAME] = csrfToken;\n    return axiosRequestConfig;\n  };\n\n  return interceptor;\n};\n\nexport default createCsrfTokenProviderInterceptor;\n"],"file":"createCsrfTokenProviderInterceptor.js"}