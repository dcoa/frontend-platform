{"version":3,"sources":["../../src/auth/addAuthenticationToHttpClient.js"],"names":["processAxiosRequestErrorInterceptor","createJwtTokenProviderInterceptor","createCsrfTokenProviderInterceptor","addAuthenticationToHttpClient","newHttpClient","config","httpClient","Object","create","defaults","withCredentials","refreshAccessTokenInterceptor","tokenCookieName","accessTokenCookieName","tokenRefreshEndpoint","refreshAccessTokenEndpoint","shouldSkip","axiosRequestConfig","isPublic","attachCsrfTokenInterceptor","csrfTokenApiPath","method","isCsrfExempt","CSRF_PROTECTED_METHODS","includes","interceptors","request","use","response"],"mappings":"AAAA,OAAOA,mCAAP,MAAgD,oDAAhD;AACA,OAAOC,iCAAP,MAA8C,kDAA9C;AACA,OAAOC,kCAAP,MAA+C,mDAA/C;AAEA;;;;;;;;;;;;AAWA,eAAe,SAASC,6BAAT,CAAuCC,aAAvC,EAAsDC,MAAtD,EAA8D;AAC3E,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcJ,aAAd,CAAnB,CAD2E,CAE3E;AACA;AACA;AACA;;AACAE,EAAAA,UAAU,CAACG,QAAX,CAAoBC,eAApB,GAAsC,IAAtC,CAN2E,CAQ3E;AAEA;AACA;;AACA,MAAMC,6BAA6B,GAAGV,iCAAiC,CAAC;AACtEW,IAAAA,eAAe,EAAEP,MAAM,CAACQ,qBAD8C;AAEtEC,IAAAA,oBAAoB,EAAET,MAAM,CAACU,0BAFyC;AAGtEC,IAAAA,UAAU,EAAE,oBAAAC,kBAAkB;AAAA,aAAIA,kBAAkB,CAACC,QAAvB;AAAA;AAHwC,GAAD,CAAvE,CAZ2E,CAiB3E;AACA;AACA;;AACA,MAAMC,0BAA0B,GAAGjB,kCAAkC,CAAC;AACpEkB,IAAAA,gBAAgB,EAAEf,MAAM,CAACe,gBAD2C;AAEpEJ,IAAAA,UAAU,EAAE,oBAACC,kBAAD,EAAwB;AAAA,UAC1BI,MAD0B,GACDJ,kBADC,CAC1BI,MAD0B;AAAA,UAClBC,YADkB,GACDL,kBADC,CAClBK,YADkB;AAElC,UAAMC,sBAAsB,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyB,QAAzB,CAA/B;AACA,aAAOD,YAAY,IAAI,CAACC,sBAAsB,CAACC,QAAvB,CAAgCH,MAAhC,CAAxB;AACD;AANmE,GAAD,CAArE,CApB2E,CA6B3E;AACA;AACA;AACA;;AACAf,EAAAA,UAAU,CAACmB,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCR,0BAApC;AACAb,EAAAA,UAAU,CAACmB,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoChB,6BAApC,EAlC2E,CAoC3E;AACA;;AACAL,EAAAA,UAAU,CAACmB,YAAX,CAAwBG,QAAxB,CAAiCD,GAAjC,CACE,UAAAC,QAAQ;AAAA,WAAIA,QAAJ;AAAA,GADV,EAEE5B,mCAFF;AAKA,SAAOM,UAAP;AACD","sourcesContent":["import processAxiosRequestErrorInterceptor from './interceptors/processAxiosRequestErrorInterceptor';\nimport createJwtTokenProviderInterceptor from './interceptors/createJwtTokenProviderInterceptor';\nimport createCsrfTokenProviderInterceptor from './interceptors/createCsrfTokenProviderInterceptor';\n\n/**\n * Adds authentication defaults and interceptors to an http client instance.\n *\n * @param {HttpClient} newHttpClient\n * @param {Object} config\n * @param {string} [config.refreshAccessTokenEndpoint]\n * @param {string} [config.accessTokenCookieName]\n * @param {string} [config.csrfTokenApiPath]\n * @returns {HttpClient} Singleton. A configured axios http client\n * @memberof module:Auth\n */\nexport default function addAuthenticationToHttpClient(newHttpClient, config) {\n  const httpClient = Object.create(newHttpClient);\n  // Set withCredentials to true. Enables cross-site Access-Control requests\n  // to be made using cookies, authorization headers or TLS client\n  // certificates. More on MDN:\n  // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials\n  httpClient.defaults.withCredentials = true;\n\n  // Axios interceptors\n\n  // The JWT access token interceptor attempts to refresh the user's jwt token\n  // before any request unless the isPublic flag is set on the request config.\n  const refreshAccessTokenInterceptor = createJwtTokenProviderInterceptor({\n    tokenCookieName: config.accessTokenCookieName,\n    tokenRefreshEndpoint: config.refreshAccessTokenEndpoint,\n    shouldSkip: axiosRequestConfig => axiosRequestConfig.isPublic,\n  });\n  // The CSRF token intercepter fetches and caches a csrf token for any post,\n  // put, patch, or delete request. That token is then added to the request\n  // headers.\n  const attachCsrfTokenInterceptor = createCsrfTokenProviderInterceptor({\n    csrfTokenApiPath: config.csrfTokenApiPath,\n    shouldSkip: (axiosRequestConfig) => {\n      const { method, isCsrfExempt } = axiosRequestConfig;\n      const CSRF_PROTECTED_METHODS = ['post', 'put', 'patch', 'delete'];\n      return isCsrfExempt || !CSRF_PROTECTED_METHODS.includes(method);\n    },\n  });\n\n  // Request interceptors: Axios runs the interceptors in reverse order from\n  // how they are listed. After fetching csrf tokens no longer require jwt\n  // authentication, it won't matter which happens first. This change is\n  // coming soon in edx-platform. Nov. 2019\n  httpClient.interceptors.request.use(attachCsrfTokenInterceptor);\n  httpClient.interceptors.request.use(refreshAccessTokenInterceptor);\n\n  // Response interceptor: moves axios response error data into the error\n  // object at error.customAttributes\n  httpClient.interceptors.response.use(\n    response => response,\n    processAxiosRequestErrorInterceptor,\n  );\n\n  return httpClient;\n}\n"],"file":"addAuthenticationToHttpClient.js"}